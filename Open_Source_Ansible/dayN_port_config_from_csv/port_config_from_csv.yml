---
- name: Read Input From CSV File.
  hosts: localhost
  any_errors_fatal: true
  gather_facts: no
  vars_files:
    - myvars.yml
  tasks:
    - name: Reading CSV file...
      read_csv:
        path: "{{csv_file}}"
      register: csv_data

    - name: Printing Results
      ansible.builtin.debug:
        var: csv_data

- name: Deploy Day-N Template
  hosts: dnac_servers
  any_errors_fatal: true
  gather_facts: no
  vars_files:
    - credentials.yml
    - myvars.yml  # You can omit this file and instead send Extra Variables via CLI command
  vars:
    # Used for YAML Anchor in Playbook, eliminates repeating code
    dnac_vars: &dnac_vars
      dnac_host: "{{ dnac_host }}"
      dnac_username: "{{ dnac_username }}"
      dnac_password: "{{ dnac_password }}"
      dnac_verify: "{{ dnac_verify }}"
      dnac_port: "{{ dnac_port }}"
      dnac_version: "{{ dnac_version }}"
      dnac_debug: "{{ dnac_debug }}"
  tasks:
    - name: Getting Device UUID by Hostname...
      cisco.dnac.network_device_info:
        <<: *dnac_vars
        hostname:
          - "{{ device_hostname }}" 
      register: device_info_hostname
      when: device_hostname is defined

    - name: Getting Device UUID by IP Address...
      cisco.dnac.network_device_info:
        <<: *dnac_vars
        managementIpAddress:
          - "{{ device_ip }}"
      register: device_info_ip
      when: device_ip is defined
    
    # Extract the device UUID from the returned data in previous task
    - ansible.builtin.set_fact:
        device_id: "{{ device_info_hostname.dnac_response.response.0.id }}"
      when: device_hostname is defined

    - ansible.builtin.set_fact:
        device_id: "{{ device_info_ip.dnac_response.response.0.id }}"
      when: device_ip is defined
    
    - ansible.builtin.debug:
        msg: "Found device UUID: {{ device_id }}"
      
    - name: Getting Template UUID...
      cisco.dnac.templates_details_info:
        <<: *dnac_vars
        name: "{{ template_name }}"
        projectName: "{{ project_name }}"
        unCommitted: true # Set to false if you don't want to search for  uncommitted templates
      register: template_details

    - ansible.builtin.set_fact:
        template_id: "{{ template_details.dnac_response.response.0.id  }}"
    
    - ansible.builtin.debug:
        msg: "Found Template UUID: {{ template_id }}"

    - name: Deploying Template (Step 1)...
      cisco.dnac.configuration_template_deploy:
        <<: *dnac_vars
        forcePushTemplate: "{{ forcePush }}"
        isComposite: false  # Can set as a variable if Composite templates might be used
        templateId: "{{ template_id }}"
        targetInfo:
        - id: "{{ device_id }}"
          type: MANAGED_DEVICE_UUID  # Review "Deploy Template" API schema in your DNA Center Developer Toolkit for the most complete documentation
          params:
            csv_data: "{{ hostvars['localhost']['csv_data']['list'] }}"
      register: deployment_result
      failed_when: deployment_result.failed == "true"
      when: preview == false

    - name: Printing Results
      ansible.builtin.debug:
        var: deployment_result
      when: preview == false
    
# If using Deploy Template V2, you need this step to get the Deployment ID
    # - name: Checking Task ID (Step 2)...
    #   cisco.dnac.task_info:
    #     <<: *dnac_vars
    #     taskId: "{{deployment_result.dnac_response.response.taskId}}"
    #   register: task_result
    #   failed_when: task_result.failed == "true"

    # - name: Printing Results
    #   ansible.builtin.debug:
    #     var: task_result
   
    - name: Extracting Deployment ID
      ansible.builtin.set_fact:
        deployId: "{{ deployment_result.dnac_response.deploymentId.split(':') | last | trim }}"
      when: preview == false
    
    - name: Getting Deployment Status (Step 2)...
      cisco.dnac.configuration_template_deploy_status_info:
        <<: *dnac_vars
        deploymentId: "{{deployId}}"
      register: deployment_status
      until: deployment_status.dnac_response.status in ["SUCCESS", "FAILURE"]
      failed_when: deployment_status.failed == "true"
      retries: 12
      delay: 10
      when: preview == false
    
    - name: Printing Results
      ansible.builtin.debug:
        var: deployment_status
      when: preview == false
    
    - name: Requesting Template Preview...
      cisco.dnac.template_preview:
        <<: *dnac_vars
        deviceId: "{{ device_id }}"
        templateId: "{{ template_id }}"
        params:
          csv_data: "{{ hostvars['localhost']['csv_data']['list'] }}"
      register: preview_result
      when: preview == true

    - name: Printing Results
      ansible.builtin.debug:
        var: preview_result.dnac_response.cliPreview
      when: preview == true